import XCTest
@testable import Citadel
import NIO
import MongoKitten
import MongoClient
import Logging
import CCryptoBoringSSL

final class CitadelTests: XCTestCase {
    // See: https://tools.ietf.org/html/rfc4251#section-4.1
    func testWriteMPInt() {
        var buffer = ByteBufferAllocator().buffer(capacity: 1000)
        var bignum: UnsafeMutablePointer<BIGNUM>!
        
        func match(hex: String, to bytes: [UInt8]) {
            CCryptoBoringSSL_BN_hex2bn(&bignum, hex)
            buffer.writeMPBignum(bignum)
            XCTAssertEqual(
                buffer.getBytes(at: 0, length: buffer.readableBytes),
                bytes
            )
            buffer.moveWriterIndex(to: 0)
        }

        match(hex: "0", to: [0x00, 0x00, 0x00, 0x00])
        match(hex: "9a378f9b2e332a7", to: [0x00, 0x00, 0x00, 0x08, 0x09, 0xa3, 0x78, 0xf9, 0xb2, 0xe3, 0x32, 0xa7])
        match(hex: "80", to: [0x00, 0x00, 0x00, 0x02, 0x00, 0x80])
        // TODO: Negative not supported yet
//        match(hex: "-1234", to: [0x00, 0x00, 0x00, 0x02, 0xed, 0xcc])
//        match(hex: "-deadbeef", to: [0x00, 0x00, 0x00, 0x05, 0xff, 0x21, 0x52, 0x41, 0x11])
    }
    
    // Takes F and H from the packets instead of raw
    func testCreateSecretRaw() throws {
        let dhContext = CCryptoBoringSSL_DH_new()!
        let x = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/priv.key")!))
        let e = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/pub.key")!))
        let k = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/secret.key")!))
        let f = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/s_pub.key")!))
        let h = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/H.key")!))
//        let ceh = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/eh.key")!))
        
        dhContext.pointee.p = CCryptoBoringSSL_BN_bin2bn(dh14p, dh14p.count, nil)
        dhContext.pointee.g = CCryptoBoringSSL_BN_bin2bn(generator2, generator2.count, nil)
        
        CCryptoBoringSSL_DH_set0_key(
            dhContext,
            CCryptoBoringSSL_BN_bin2bn(e, e.count, nil),
            CCryptoBoringSSL_BN_bin2bn(x, x.count, nil)
        )

        let allocator = ByteBufferAllocator()
        
        let rsaE: [UInt8] = [0x01, 0x00, 0x01]
        let rsaN: [UInt8] = [0x00, 0xfa, 0x39, 0x5c, 0xb7, 0x55, 0x22, 0xc9, 0x4b, 0xe6, 0xa3, 0x2d, 0x70, 0x61, 0x91, 0x5e, 0x22, 0xf0, 0x27, 0x59, 0x0d, 0x46, 0xbe, 0xe1, 0x9f, 0xc8, 0xf4, 0x91, 0x74, 0xff, 0x78, 0xff, 0xd0, 0xc7, 0x16, 0x8c, 0x16, 0x2f, 0xac, 0x2b, 0x06, 0x71, 0xd1, 0x40, 0x33, 0xeb, 0xd6, 0x22, 0x7f, 0x17, 0x86, 0x8d, 0x2e, 0x39, 0x2c, 0x5d, 0x4f, 0x7f, 0xc8, 0x11, 0xc8, 0x7f, 0xd1, 0xde, 0x61, 0xa4, 0x87, 0xd7, 0x6f, 0xf1, 0x44, 0x51, 0xa4, 0x21, 0xec, 0xca, 0x88, 0xd7, 0xfa, 0xa4, 0x12, 0x71, 0x49, 0xf6, 0xd7, 0xf3, 0xdc, 0x74, 0x19, 0x72, 0xee, 0xb0, 0xf7, 0x94, 0x24, 0x74, 0x91, 0xfd, 0xcb, 0xd1, 0xb7, 0x92, 0xd6, 0xeb, 0x75, 0x50, 0x9d, 0x27, 0x0d, 0x4c, 0x80, 0xaf, 0x3b, 0x45, 0xc8, 0xae, 0xd7, 0x8e, 0x98, 0x7f, 0xf5, 0xbb, 0x26, 0x70, 0x52, 0x9d, 0x26, 0xc3, 0xa7, 0xb6, 0xa5, 0x82, 0xfa, 0x82, 0x22, 0x0d, 0x15, 0xd6, 0xb9, 0x73, 0x86, 0x1b, 0x0f, 0xfa, 0xf3, 0x5f, 0xcb, 0x98, 0x6a, 0xee, 0xaf, 0x0f, 0x74, 0x2e, 0x2e, 0x7e, 0x3b, 0x0e, 0x35, 0xfc, 0x87, 0x44, 0xf9, 0xcf, 0xf5, 0xdc, 0x65, 0x54, 0x8b, 0x4b, 0xc2, 0x14, 0x88, 0x9a, 0x59, 0xfc, 0x8b, 0xf8, 0xc5, 0x5d, 0x11, 0x32, 0x12, 0xee, 0xd5, 0x8c, 0x24, 0x90, 0x72, 0x1b, 0x21, 0x6c, 0xe1, 0x4a, 0xee, 0x3a, 0xca, 0x40, 0xbd, 0x1d, 0x55, 0x2d, 0xa5, 0x6b, 0x26, 0xc4, 0x49, 0x5d, 0x34, 0x9c, 0x5c, 0x33, 0xe7, 0x3e, 0x8e, 0x9f, 0xe4, 0xf5, 0x8d, 0x42, 0xa7, 0x7b, 0x43, 0xc8, 0xe5, 0xda, 0xcd, 0x73, 0xb1, 0xa7, 0xa9, 0xc1, 0x12, 0x67, 0xc1, 0x01, 0x92, 0xf4, 0x47, 0x81, 0x02, 0xb7, 0x5c, 0x0f, 0x2a, 0xed, 0x02, 0x88, 0x31, 0x63, 0x45, 0x12, 0xa0, 0x17, 0x6f, 0x6a, 0x65]
        
        let _hostKey: [UInt8] = [0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0xfa, 0x39, 0x5c, 0xb7, 0x55, 0x22, 0xc9, 0x4b, 0xe6, 0xa3, 0x2d, 0x70, 0x61, 0x91, 0x5e, 0x22, 0xf0, 0x27, 0x59, 0x0d, 0x46, 0xbe, 0xe1, 0x9f, 0xc8, 0xf4, 0x91, 0x74, 0xff, 0x78, 0xff, 0xd0, 0xc7, 0x16, 0x8c, 0x16, 0x2f, 0xac, 0x2b, 0x06, 0x71, 0xd1, 0x40, 0x33, 0xeb, 0xd6, 0x22, 0x7f, 0x17, 0x86, 0x8d, 0x2e, 0x39, 0x2c, 0x5d, 0x4f, 0x7f, 0xc8, 0x11, 0xc8, 0x7f, 0xd1, 0xde, 0x61, 0xa4, 0x87, 0xd7, 0x6f, 0xf1, 0x44, 0x51, 0xa4, 0x21, 0xec, 0xca, 0x88, 0xd7, 0xfa, 0xa4, 0x12, 0x71, 0x49, 0xf6, 0xd7, 0xf3, 0xdc, 0x74, 0x19, 0x72, 0xee, 0xb0, 0xf7, 0x94, 0x24, 0x74, 0x91, 0xfd, 0xcb, 0xd1, 0xb7, 0x92, 0xd6, 0xeb, 0x75, 0x50, 0x9d, 0x27, 0x0d, 0x4c, 0x80, 0xaf, 0x3b, 0x45, 0xc8, 0xae, 0xd7, 0x8e, 0x98, 0x7f, 0xf5, 0xbb, 0x26, 0x70, 0x52, 0x9d, 0x26, 0xc3, 0xa7, 0xb6, 0xa5, 0x82, 0xfa, 0x82, 0x22, 0x0d, 0x15, 0xd6, 0xb9, 0x73, 0x86, 0x1b, 0x0f, 0xfa, 0xf3, 0x5f, 0xcb, 0x98, 0x6a, 0xee, 0xaf, 0x0f, 0x74, 0x2e, 0x2e, 0x7e, 0x3b, 0x0e, 0x35, 0xfc, 0x87, 0x44, 0xf9, 0xcf, 0xf5, 0xdc, 0x65, 0x54, 0x8b, 0x4b, 0xc2, 0x14, 0x88, 0x9a, 0x59, 0xfc, 0x8b, 0xf8, 0xc5, 0x5d, 0x11, 0x32, 0x12, 0xee, 0xd5, 0x8c, 0x24, 0x90, 0x72, 0x1b, 0x21, 0x6c, 0xe1, 0x4a, 0xee, 0x3a, 0xca, 0x40, 0xbd, 0x1d, 0x55, 0x2d, 0xa5, 0x6b, 0x26, 0xc4, 0x49, 0x5d, 0x34, 0x9c, 0x5c, 0x33, 0xe7, 0x3e, 0x8e, 0x9f, 0xe4, 0xf5, 0x8d, 0x42, 0xa7, 0x7b, 0x43, 0xc8, 0xe5, 0xda, 0xcd, 0x73, 0xb1, 0xa7, 0xa9, 0xc1, 0x12, 0x67, 0xc1, 0x01, 0x92, 0xf4, 0x47, 0x81, 0x02, 0xb7, 0x5c, 0x0f, 0x2a, 0xed, 0x02, 0x88, 0x31, 0x63, 0x45, 0x12, 0xa0, 0x17, 0x6f, 0x6a, 0x65]
        var hostKey = allocator.buffer(capacity: _hostKey.count)
        hostKey.writeBytes(_hostKey)

        let rsaS: [UInt8] = [0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x01, 0x00, 0xad, 0x32, 0x82, 0x8a, 0x10, 0x94, 0xa9, 0x49, 0x65, 0x53, 0x6b, 0x11, 0xd2, 0x88, 0x9c, 0x80, 0x07, 0xa3, 0x63, 0x95, 0x15, 0xf4, 0x0b, 0x79, 0xda, 0xf6, 0x2f, 0xd6, 0x63, 0xd4, 0xa8, 0x36, 0xb9, 0x43, 0x79, 0xd6, 0xaa, 0xc6, 0xbc, 0x7b, 0xea, 0x61, 0x2d, 0x4a, 0x25, 0x77, 0xb2, 0x61, 0x6b, 0x1f, 0xe8, 0x83, 0xe8, 0xd6, 0x1a, 0x5e, 0xfb, 0x7b, 0x6a, 0x63, 0xfc, 0x26, 0x08, 0x0c, 0xb1, 0x04, 0x78, 0xe5, 0x4d, 0x0b, 0xb4, 0x83, 0x2a, 0xba, 0xc7, 0xa9, 0x85, 0x7f, 0xb3, 0xbf, 0x17, 0xca, 0x3b, 0xc8, 0xf9, 0x6a, 0x6a, 0x9e, 0xc7, 0xbf, 0x93, 0x02, 0xc1, 0x35, 0x8d, 0x42, 0x5e, 0xc6, 0x7f, 0x2a, 0xb4, 0x45, 0x4d, 0x93, 0x46, 0x99, 0x2f, 0xc4, 0xa1, 0xf4, 0x04, 0x3c, 0x10, 0x93, 0x96, 0xb5, 0xc6, 0x31, 0xf8, 0xd4, 0x68, 0x52, 0x83, 0x2f, 0x08, 0x66, 0x17, 0x06, 0x62, 0x61, 0xb7, 0x92, 0xf9, 0xda, 0xee, 0xc3, 0x62, 0x8e, 0xb3, 0x06, 0xe6, 0xc0, 0xbe, 0x44, 0xdc, 0x42, 0x57, 0x7e, 0x6f, 0x3d, 0xd0, 0x41, 0x25, 0x81, 0xee, 0x37, 0xef, 0x81, 0xb4, 0x75, 0xc7, 0x9d, 0x7e, 0x13, 0xc0, 0xcb, 0xd2, 0x2a, 0x40, 0x9b, 0x02, 0xc7, 0x89, 0x8b, 0x11, 0x04, 0x47, 0x28, 0x57, 0x88, 0x4f, 0x73, 0x61, 0x32, 0xca, 0xe6, 0x1e, 0x37, 0x4d, 0x67, 0x2e, 0xd5, 0x4a, 0xc5, 0x89, 0x7d, 0x8c, 0xd9, 0xd4, 0x6f, 0x3e, 0x55, 0xe0, 0xab, 0xbd, 0x9b, 0x80, 0xf0, 0x06, 0xa9, 0xb9, 0x12, 0x7f, 0xe2, 0x16, 0x8c, 0xe6, 0xb4, 0x42, 0x14, 0xfb, 0xea, 0x33, 0xa5, 0x16, 0x23, 0xe6, 0x72, 0x92, 0xb7, 0xc5, 0xdf, 0xbe, 0xcf, 0x25, 0x2f, 0xe4, 0x31, 0x8e, 0x10, 0x9d, 0x76, 0x31, 0x7f, 0x1e, 0x5d, 0xf9, 0x70, 0xe9, 0x7a, 0xd1, 0x68, 0xfc, 0x8b, 0x87, 0xe8]
        var s = allocator.buffer(capacity: rsaS.count)
        s.writeBytes(rsaS)
        
        let _ke_c: [UInt8] = [0x14, 0xed, 0x83, 0xcb, 0x32, 0x30, 0x25, 0x14, 0x75, 0x5d, 0x2c, 0x8e, 0x3e, 0x5c, 0x75, 0x2c, 0x3c, 0x00, 0x00, 0x00, 0x1b, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x00, 0x92, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0x92, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0x71, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x71, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]
        var ke_c = allocator.buffer(capacity: _ke_c.count)
        ke_c.writeBytes(_ke_c)
        let kex_c = try KeyExchangeInitialization(parsing: &ke_c)!
        
        let _ke_s: [UInt8] = [0x14, 0xe4, 0x26, 0x0f, 0x74, 0xcf, 0xc2, 0x05, 0x9a, 0x83, 0x5d, 0x37, 0xce, 0x9e, 0xdf, 0x90, 0x23, 0x00, 0x00, 0x01, 0x02, 0x63, 0x75, 0x72, 0x76, 0x65, 0x32, 0x35, 0x35, 0x31, 0x39, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x63, 0x75, 0x72, 0x76, 0x65, 0x32, 0x35, 0x35, 0x31, 0x39, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x40, 0x6c, 0x69, 0x62, 0x73, 0x73, 0x68, 0x2e, 0x6f, 0x72, 0x67, 0x2c, 0x65, 0x63, 0x64, 0x68, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2c, 0x65, 0x63, 0x64, 0x68, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x33, 0x38, 0x34, 0x2c, 0x65, 0x63, 0x64, 0x68, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x35, 0x32, 0x31, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x36, 0x2d, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x38, 0x2d, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x41, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x2c, 0x72, 0x73, 0x61, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x72, 0x73, 0x61, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2c, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x6c, 0x63, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x2d, 0x70, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30, 0x35, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x6c, 0x63, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x2d, 0x70, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30, 0x35, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0xd5, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0xd5, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x15, 0x6e, 0x6f, 0x6e, 0x65, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x15, 0x6e, 0x6f, 0x6e, 0x65, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]
        var ke_s = allocator.buffer(capacity: _ke_s.count)
        ke_s.writeBytes(_ke_s)
        let kex_s = try KeyExchangeInitialization(parsing: &ke_s)!
        ke_s.moveReaderIndex(to: 0)
        
        let _kexdhInit_s: [UInt8] = [0x1f, 0x00, 0x00, 0x01, 0x17, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0xfa, 0x39, 0x5c, 0xb7, 0x55, 0x22, 0xc9, 0x4b, 0xe6, 0xa3, 0x2d, 0x70, 0x61, 0x91, 0x5e, 0x22, 0xf0, 0x27, 0x59, 0x0d, 0x46, 0xbe, 0xe1, 0x9f, 0xc8, 0xf4, 0x91, 0x74, 0xff, 0x78, 0xff, 0xd0, 0xc7, 0x16, 0x8c, 0x16, 0x2f, 0xac, 0x2b, 0x06, 0x71, 0xd1, 0x40, 0x33, 0xeb, 0xd6, 0x22, 0x7f, 0x17, 0x86, 0x8d, 0x2e, 0x39, 0x2c, 0x5d, 0x4f, 0x7f, 0xc8, 0x11, 0xc8, 0x7f, 0xd1, 0xde, 0x61, 0xa4, 0x87, 0xd7, 0x6f, 0xf1, 0x44, 0x51, 0xa4, 0x21, 0xec, 0xca, 0x88, 0xd7, 0xfa, 0xa4, 0x12, 0x71, 0x49, 0xf6, 0xd7, 0xf3, 0xdc, 0x74, 0x19, 0x72, 0xee, 0xb0, 0xf7, 0x94, 0x24, 0x74, 0x91, 0xfd, 0xcb, 0xd1, 0xb7, 0x92, 0xd6, 0xeb, 0x75, 0x50, 0x9d, 0x27, 0x0d, 0x4c, 0x80, 0xaf, 0x3b, 0x45, 0xc8, 0xae, 0xd7, 0x8e, 0x98, 0x7f, 0xf5, 0xbb, 0x26, 0x70, 0x52, 0x9d, 0x26, 0xc3, 0xa7, 0xb6, 0xa5, 0x82, 0xfa, 0x82, 0x22, 0x0d, 0x15, 0xd6, 0xb9, 0x73, 0x86, 0x1b, 0x0f, 0xfa, 0xf3, 0x5f, 0xcb, 0x98, 0x6a, 0xee, 0xaf, 0x0f, 0x74, 0x2e, 0x2e, 0x7e, 0x3b, 0x0e, 0x35, 0xfc, 0x87, 0x44, 0xf9, 0xcf, 0xf5, 0xdc, 0x65, 0x54, 0x8b, 0x4b, 0xc2, 0x14, 0x88, 0x9a, 0x59, 0xfc, 0x8b, 0xf8, 0xc5, 0x5d, 0x11, 0x32, 0x12, 0xee, 0xd5, 0x8c, 0x24, 0x90, 0x72, 0x1b, 0x21, 0x6c, 0xe1, 0x4a, 0xee, 0x3a, 0xca, 0x40, 0xbd, 0x1d, 0x55, 0x2d, 0xa5, 0x6b, 0x26, 0xc4, 0x49, 0x5d, 0x34, 0x9c, 0x5c, 0x33, 0xe7, 0x3e, 0x8e, 0x9f, 0xe4, 0xf5, 0x8d, 0x42, 0xa7, 0x7b, 0x43, 0xc8, 0xe5, 0xda, 0xcd, 0x73, 0xb1, 0xa7, 0xa9, 0xc1, 0x12, 0x67, 0xc1, 0x01, 0x92, 0xf4, 0x47, 0x81, 0x02, 0xb7, 0x5c, 0x0f, 0x2a, 0xed, 0x02, 0x88, 0x31, 0x63, 0x45, 0x12, 0xa0, 0x17, 0x6f, 0x6a, 0x65, 0x00, 0x00, 0x01, 0x00, 0x4c, 0x88, 0xe4, 0x01, 0x79, 0x0e, 0x7d, 0x3a, 0xae, 0x05, 0x86, 0xcf, 0x4f, 0x32, 0xb6, 0xf2, 0xe2, 0x47, 0xff, 0x4a, 0xb0, 0xdc, 0x26, 0xcd, 0xd0, 0xcd, 0xeb, 0xb9, 0x9d, 0x77, 0xb1, 0xf6, 0x14, 0x7d, 0x05, 0x13, 0x3f, 0xef, 0x87, 0x1a, 0x75, 0x4a, 0x0f, 0x43, 0x44, 0x51, 0xb5, 0xcc, 0x16, 0x1d, 0x34, 0xcc, 0x95, 0xda, 0x55, 0xd7, 0xfe, 0x52, 0x3b, 0x44, 0x3c, 0x4b, 0xb0, 0x3b, 0xb8, 0x63, 0x53, 0x5f, 0x38, 0x7b, 0x9a, 0x8f, 0x30, 0xdf, 0xd5, 0x8c, 0x5f, 0xed, 0x0a, 0x1b, 0xee, 0xeb, 0xab, 0xbc, 0xdc, 0x32, 0xda, 0xf7, 0x1c, 0xb2, 0xf9, 0x3e, 0x3d, 0x0f, 0xa4, 0x12, 0x07, 0x49, 0xc4, 0x9d, 0x23, 0x5c, 0x0b, 0x18, 0x38, 0x08, 0x07, 0x83, 0xcf, 0x4c, 0x8f, 0x1b, 0x4d, 0xe8, 0x8c, 0x8a, 0xe6, 0xfd, 0xfc, 0xa0, 0x01, 0x1d, 0xb4, 0xf2, 0x41, 0x45, 0xd0, 0xbf, 0x78, 0xa3, 0x8b, 0xfa, 0xcb, 0xcc, 0xbf, 0x21, 0x71, 0x5b, 0xf2, 0x09, 0x68, 0xe9, 0xf0, 0x10, 0x1c, 0xdb, 0x02, 0xd6, 0x33, 0x8f, 0x6a, 0x89, 0x84, 0x7c, 0x8d, 0xb6, 0x1f, 0x21, 0x0c, 0x39, 0x97, 0xa9, 0xf2, 0x6a, 0x5e, 0xb8, 0xbb, 0xa3, 0x1b, 0x4b, 0xab, 0xf2, 0x2e, 0x21, 0xa6, 0x4f, 0xd0, 0x30, 0x5a, 0x02, 0x52, 0x2a, 0xc0, 0x19, 0xe0, 0xd3, 0x5d, 0x92, 0xb6, 0x2d, 0x3b, 0xd2, 0x39, 0xf3, 0xed, 0x4c, 0x49, 0x41, 0x23, 0xe9, 0x9e, 0x62, 0x62, 0xb6, 0x63, 0x4f, 0x60, 0x6f, 0x76, 0x3a, 0x12, 0x75, 0x98, 0xdc, 0x82, 0x22, 0xab, 0x29, 0xeb, 0x3e, 0xd2, 0x73, 0xb6, 0x8d, 0x8d, 0x92, 0xcb, 0x64, 0x45, 0x50, 0xc1, 0x9c, 0x45, 0x3a, 0xdc, 0xf5, 0xa9, 0x3e, 0xca, 0x3f, 0xf2, 0x21, 0xdd, 0xf0, 0x18, 0xe0, 0xe9, 0x9d, 0x7c, 0x76, 0x23, 0x2b, 0x84, 0x48, 0x4f, 0x8e, 0x00, 0x00, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x01, 0x00, 0xad, 0x32, 0x82, 0x8a, 0x10, 0x94, 0xa9, 0x49, 0x65, 0x53, 0x6b, 0x11, 0xd2, 0x88, 0x9c, 0x80, 0x07, 0xa3, 0x63, 0x95, 0x15, 0xf4, 0x0b, 0x79, 0xda, 0xf6, 0x2f, 0xd6, 0x63, 0xd4, 0xa8, 0x36, 0xb9, 0x43, 0x79, 0xd6, 0xaa, 0xc6, 0xbc, 0x7b, 0xea, 0x61, 0x2d, 0x4a, 0x25, 0x77, 0xb2, 0x61, 0x6b, 0x1f, 0xe8, 0x83, 0xe8, 0xd6, 0x1a, 0x5e, 0xfb, 0x7b, 0x6a, 0x63, 0xfc, 0x26, 0x08, 0x0c, 0xb1, 0x04, 0x78, 0xe5, 0x4d, 0x0b, 0xb4, 0x83, 0x2a, 0xba, 0xc7, 0xa9, 0x85, 0x7f, 0xb3, 0xbf, 0x17, 0xca, 0x3b, 0xc8, 0xf9, 0x6a, 0x6a, 0x9e, 0xc7, 0xbf, 0x93, 0x02, 0xc1, 0x35, 0x8d, 0x42, 0x5e, 0xc6, 0x7f, 0x2a, 0xb4, 0x45, 0x4d, 0x93, 0x46, 0x99, 0x2f, 0xc4, 0xa1, 0xf4, 0x04, 0x3c, 0x10, 0x93, 0x96, 0xb5, 0xc6, 0x31, 0xf8, 0xd4, 0x68, 0x52, 0x83, 0x2f, 0x08, 0x66, 0x17, 0x06, 0x62, 0x61, 0xb7, 0x92, 0xf9, 0xda, 0xee, 0xc3, 0x62, 0x8e, 0xb3, 0x06, 0xe6, 0xc0, 0xbe, 0x44, 0xdc, 0x42, 0x57, 0x7e, 0x6f, 0x3d, 0xd0, 0x41, 0x25, 0x81, 0xee, 0x37, 0xef, 0x81, 0xb4, 0x75, 0xc7, 0x9d, 0x7e, 0x13, 0xc0, 0xcb, 0xd2, 0x2a, 0x40, 0x9b, 0x02, 0xc7, 0x89, 0x8b, 0x11, 0x04, 0x47, 0x28, 0x57, 0x88, 0x4f, 0x73, 0x61, 0x32, 0xca, 0xe6, 0x1e, 0x37, 0x4d, 0x67, 0x2e, 0xd5, 0x4a, 0xc5, 0x89, 0x7d, 0x8c, 0xd9, 0xd4, 0x6f, 0x3e, 0x55, 0xe0, 0xab, 0xbd, 0x9b, 0x80, 0xf0, 0x06, 0xa9, 0xb9, 0x12, 0x7f, 0xe2, 0x16, 0x8c, 0xe6, 0xb4, 0x42, 0x14, 0xfb, 0xea, 0x33, 0xa5, 0x16, 0x23, 0xe6, 0x72, 0x92, 0xb7, 0xc5, 0xdf, 0xbe, 0xcf, 0x25, 0x2f, 0xe4, 0x31, 0x8e, 0x10, 0x9d, 0x76, 0x31, 0x7f, 0x1e, 0x5d, 0xf9, 0x70, 0xe9, 0x7a, 0xd1, 0x68, 0xfc, 0x8b, 0x87, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]
        var kexdhInit_s = allocator.buffer(capacity: _kexdhInit_s.count)
        kexdhInit_s.writeBytes(_kexdhInit_s)
        
        let client = DHClientParameters(
            keyExchangeConfig: kex_c,
            appName: "libssh2_1.9.0_DEV",
            keys: SSHKeyGenerator.premade(dhContext)
        )
        XCTAssertEqual(client.kexInitPayload.getBytes(at: 0, length: client.kexInitPayload.readableBytes), _ke_c)
        
        let server = try DHServerParameters(
            parsing: &kexdhInit_s,
            kexInitBuffer: ke_s,
            identificationString: "SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3"
        )!
        
        let bn_f = CCryptoBoringSSL_BN_bin2bn(f, f.count, nil)!
        let bn_rsa_e = CCryptoBoringSSL_BN_bin2bn(rsaE, rsaE.count, nil)!
        let bn_rsa_n = CCryptoBoringSSL_BN_bin2bn(rsaN, rsaN.count, nil)!
        
        XCTAssertEqual([UInt8](bignum: server.serverPublicKey), f)
        XCTAssertEqual([UInt8](bignum: bn_f), f)
        XCTAssertEqual([UInt8](bignum: server.e), rsaE)
        XCTAssertEqual([UInt8](bignum: server.n), rsaN)
        XCTAssertEqual(server.hostKey, hostKey)
        
        XCTAssertEqual(CCryptoBoringSSL_BN_equal_consttime(bn_f, server.serverPublicKey), 1)
        XCTAssertEqual(CCryptoBoringSSL_BN_equal_consttime(bn_rsa_e, server.e), 1)
        XCTAssertEqual(CCryptoBoringSSL_BN_equal_consttime(bn_rsa_n, server.n), 1)
        
        XCTAssertEqual(server.signature.getBytes(at: 0, length: server.signature.readableBytes), rsaS)
        
        let params = try DHClientServerParameters(
            client: client,
            server: server,
            config: try .init(
                client: kex_c,
                server: kex_s
            )
        )

        XCTAssertEqual([UInt8](bignum: params.secret).count, k.count)
        XCTAssertEqual([UInt8](bignum: params.secret), k)
        XCTAssertEqual(params.exchangeHash, h)
    }
    
    func testCreateSecretSpoonfed() throws {
        let dhContext = CCryptoBoringSSL_DH_new()!
        let x = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/priv.key")!))
        let e = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/pub.key")!))
        let f = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/s_pub.key")!))
        let k = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/secret.key")!))
        // Exchange hash result: H
        let h = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/H.key")!))
        // Exchange Hash Input (before hashing starts)
//        let ceh = try Array(Data(contentsOf: URL(string: "file:///Users/joannisorlandos/Projects/Citadel/eh.key")!))
        
        dhContext.pointee.p = CCryptoBoringSSL_BN_bin2bn(dh14p, dh14p.count, nil)
        dhContext.pointee.g = CCryptoBoringSSL_BN_bin2bn(generator2, generator2.count, nil)
        
        CCryptoBoringSSL_DH_set0_key(
            dhContext,
            CCryptoBoringSSL_BN_bin2bn(e, e.count, nil),
            CCryptoBoringSSL_BN_bin2bn(x, x.count, nil)
        )
        
        let allocator = ByteBufferAllocator()
        
        let rsaE: [UInt8] = [0x01, 0x00, 0x01]
        let rsaN: [UInt8] = [0x00, 0xfa, 0x39, 0x5c, 0xb7, 0x55, 0x22, 0xc9, 0x4b, 0xe6, 0xa3, 0x2d, 0x70, 0x61, 0x91, 0x5e, 0x22, 0xf0, 0x27, 0x59, 0x0d, 0x46, 0xbe, 0xe1, 0x9f, 0xc8, 0xf4, 0x91, 0x74, 0xff, 0x78, 0xff, 0xd0, 0xc7, 0x16, 0x8c, 0x16, 0x2f, 0xac, 0x2b, 0x06, 0x71, 0xd1, 0x40, 0x33, 0xeb, 0xd6, 0x22, 0x7f, 0x17, 0x86, 0x8d, 0x2e, 0x39, 0x2c, 0x5d, 0x4f, 0x7f, 0xc8, 0x11, 0xc8, 0x7f, 0xd1, 0xde, 0x61, 0xa4, 0x87, 0xd7, 0x6f, 0xf1, 0x44, 0x51, 0xa4, 0x21, 0xec, 0xca, 0x88, 0xd7, 0xfa, 0xa4, 0x12, 0x71, 0x49, 0xf6, 0xd7, 0xf3, 0xdc, 0x74, 0x19, 0x72, 0xee, 0xb0, 0xf7, 0x94, 0x24, 0x74, 0x91, 0xfd, 0xcb, 0xd1, 0xb7, 0x92, 0xd6, 0xeb, 0x75, 0x50, 0x9d, 0x27, 0x0d, 0x4c, 0x80, 0xaf, 0x3b, 0x45, 0xc8, 0xae, 0xd7, 0x8e, 0x98, 0x7f, 0xf5, 0xbb, 0x26, 0x70, 0x52, 0x9d, 0x26, 0xc3, 0xa7, 0xb6, 0xa5, 0x82, 0xfa, 0x82, 0x22, 0x0d, 0x15, 0xd6, 0xb9, 0x73, 0x86, 0x1b, 0x0f, 0xfa, 0xf3, 0x5f, 0xcb, 0x98, 0x6a, 0xee, 0xaf, 0x0f, 0x74, 0x2e, 0x2e, 0x7e, 0x3b, 0x0e, 0x35, 0xfc, 0x87, 0x44, 0xf9, 0xcf, 0xf5, 0xdc, 0x65, 0x54, 0x8b, 0x4b, 0xc2, 0x14, 0x88, 0x9a, 0x59, 0xfc, 0x8b, 0xf8, 0xc5, 0x5d, 0x11, 0x32, 0x12, 0xee, 0xd5, 0x8c, 0x24, 0x90, 0x72, 0x1b, 0x21, 0x6c, 0xe1, 0x4a, 0xee, 0x3a, 0xca, 0x40, 0xbd, 0x1d, 0x55, 0x2d, 0xa5, 0x6b, 0x26, 0xc4, 0x49, 0x5d, 0x34, 0x9c, 0x5c, 0x33, 0xe7, 0x3e, 0x8e, 0x9f, 0xe4, 0xf5, 0x8d, 0x42, 0xa7, 0x7b, 0x43, 0xc8, 0xe5, 0xda, 0xcd, 0x73, 0xb1, 0xa7, 0xa9, 0xc1, 0x12, 0x67, 0xc1, 0x01, 0x92, 0xf4, 0x47, 0x81, 0x02, 0xb7, 0x5c, 0x0f, 0x2a, 0xed, 0x02, 0x88, 0x31, 0x63, 0x45, 0x12, 0xa0, 0x17, 0x6f, 0x6a, 0x65]
        
        let _hostKey: [UInt8] = [0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0xfa, 0x39, 0x5c, 0xb7, 0x55, 0x22, 0xc9, 0x4b, 0xe6, 0xa3, 0x2d, 0x70, 0x61, 0x91, 0x5e, 0x22, 0xf0, 0x27, 0x59, 0x0d, 0x46, 0xbe, 0xe1, 0x9f, 0xc8, 0xf4, 0x91, 0x74, 0xff, 0x78, 0xff, 0xd0, 0xc7, 0x16, 0x8c, 0x16, 0x2f, 0xac, 0x2b, 0x06, 0x71, 0xd1, 0x40, 0x33, 0xeb, 0xd6, 0x22, 0x7f, 0x17, 0x86, 0x8d, 0x2e, 0x39, 0x2c, 0x5d, 0x4f, 0x7f, 0xc8, 0x11, 0xc8, 0x7f, 0xd1, 0xde, 0x61, 0xa4, 0x87, 0xd7, 0x6f, 0xf1, 0x44, 0x51, 0xa4, 0x21, 0xec, 0xca, 0x88, 0xd7, 0xfa, 0xa4, 0x12, 0x71, 0x49, 0xf6, 0xd7, 0xf3, 0xdc, 0x74, 0x19, 0x72, 0xee, 0xb0, 0xf7, 0x94, 0x24, 0x74, 0x91, 0xfd, 0xcb, 0xd1, 0xb7, 0x92, 0xd6, 0xeb, 0x75, 0x50, 0x9d, 0x27, 0x0d, 0x4c, 0x80, 0xaf, 0x3b, 0x45, 0xc8, 0xae, 0xd7, 0x8e, 0x98, 0x7f, 0xf5, 0xbb, 0x26, 0x70, 0x52, 0x9d, 0x26, 0xc3, 0xa7, 0xb6, 0xa5, 0x82, 0xfa, 0x82, 0x22, 0x0d, 0x15, 0xd6, 0xb9, 0x73, 0x86, 0x1b, 0x0f, 0xfa, 0xf3, 0x5f, 0xcb, 0x98, 0x6a, 0xee, 0xaf, 0x0f, 0x74, 0x2e, 0x2e, 0x7e, 0x3b, 0x0e, 0x35, 0xfc, 0x87, 0x44, 0xf9, 0xcf, 0xf5, 0xdc, 0x65, 0x54, 0x8b, 0x4b, 0xc2, 0x14, 0x88, 0x9a, 0x59, 0xfc, 0x8b, 0xf8, 0xc5, 0x5d, 0x11, 0x32, 0x12, 0xee, 0xd5, 0x8c, 0x24, 0x90, 0x72, 0x1b, 0x21, 0x6c, 0xe1, 0x4a, 0xee, 0x3a, 0xca, 0x40, 0xbd, 0x1d, 0x55, 0x2d, 0xa5, 0x6b, 0x26, 0xc4, 0x49, 0x5d, 0x34, 0x9c, 0x5c, 0x33, 0xe7, 0x3e, 0x8e, 0x9f, 0xe4, 0xf5, 0x8d, 0x42, 0xa7, 0x7b, 0x43, 0xc8, 0xe5, 0xda, 0xcd, 0x73, 0xb1, 0xa7, 0xa9, 0xc1, 0x12, 0x67, 0xc1, 0x01, 0x92, 0xf4, 0x47, 0x81, 0x02, 0xb7, 0x5c, 0x0f, 0x2a, 0xed, 0x02, 0x88, 0x31, 0x63, 0x45, 0x12, 0xa0, 0x17, 0x6f, 0x6a, 0x65]
        var hostKey = allocator.buffer(capacity: _hostKey.count)
        hostKey.writeBytes(_hostKey)
        
        let rsaS: [UInt8] = [0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x01, 0x00, 0xad, 0x32, 0x82, 0x8a, 0x10, 0x94, 0xa9, 0x49, 0x65, 0x53, 0x6b, 0x11, 0xd2, 0x88, 0x9c, 0x80, 0x07, 0xa3, 0x63, 0x95, 0x15, 0xf4, 0x0b, 0x79, 0xda, 0xf6, 0x2f, 0xd6, 0x63, 0xd4, 0xa8, 0x36, 0xb9, 0x43, 0x79, 0xd6, 0xaa, 0xc6, 0xbc, 0x7b, 0xea, 0x61, 0x2d, 0x4a, 0x25, 0x77, 0xb2, 0x61, 0x6b, 0x1f, 0xe8, 0x83, 0xe8, 0xd6, 0x1a, 0x5e, 0xfb, 0x7b, 0x6a, 0x63, 0xfc, 0x26, 0x08, 0x0c, 0xb1, 0x04, 0x78, 0xe5, 0x4d, 0x0b, 0xb4, 0x83, 0x2a, 0xba, 0xc7, 0xa9, 0x85, 0x7f, 0xb3, 0xbf, 0x17, 0xca, 0x3b, 0xc8, 0xf9, 0x6a, 0x6a, 0x9e, 0xc7, 0xbf, 0x93, 0x02, 0xc1, 0x35, 0x8d, 0x42, 0x5e, 0xc6, 0x7f, 0x2a, 0xb4, 0x45, 0x4d, 0x93, 0x46, 0x99, 0x2f, 0xc4, 0xa1, 0xf4, 0x04, 0x3c, 0x10, 0x93, 0x96, 0xb5, 0xc6, 0x31, 0xf8, 0xd4, 0x68, 0x52, 0x83, 0x2f, 0x08, 0x66, 0x17, 0x06, 0x62, 0x61, 0xb7, 0x92, 0xf9, 0xda, 0xee, 0xc3, 0x62, 0x8e, 0xb3, 0x06, 0xe6, 0xc0, 0xbe, 0x44, 0xdc, 0x42, 0x57, 0x7e, 0x6f, 0x3d, 0xd0, 0x41, 0x25, 0x81, 0xee, 0x37, 0xef, 0x81, 0xb4, 0x75, 0xc7, 0x9d, 0x7e, 0x13, 0xc0, 0xcb, 0xd2, 0x2a, 0x40, 0x9b, 0x02, 0xc7, 0x89, 0x8b, 0x11, 0x04, 0x47, 0x28, 0x57, 0x88, 0x4f, 0x73, 0x61, 0x32, 0xca, 0xe6, 0x1e, 0x37, 0x4d, 0x67, 0x2e, 0xd5, 0x4a, 0xc5, 0x89, 0x7d, 0x8c, 0xd9, 0xd4, 0x6f, 0x3e, 0x55, 0xe0, 0xab, 0xbd, 0x9b, 0x80, 0xf0, 0x06, 0xa9, 0xb9, 0x12, 0x7f, 0xe2, 0x16, 0x8c, 0xe6, 0xb4, 0x42, 0x14, 0xfb, 0xea, 0x33, 0xa5, 0x16, 0x23, 0xe6, 0x72, 0x92, 0xb7, 0xc5, 0xdf, 0xbe, 0xcf, 0x25, 0x2f, 0xe4, 0x31, 0x8e, 0x10, 0x9d, 0x76, 0x31, 0x7f, 0x1e, 0x5d, 0xf9, 0x70, 0xe9, 0x7a, 0xd1, 0x68, 0xfc, 0x8b, 0x87, 0xe8]
        var s = allocator.buffer(capacity: rsaS.count)
        s.writeBytes(rsaS)
        
        let _ke_c: [UInt8] = [0x14, 0xed, 0x83, 0xcb, 0x32, 0x30, 0x25, 0x14, 0x75, 0x5d, 0x2c, 0x8e, 0x3e, 0x5c, 0x75, 0x2c, 0x3c, 0x00, 0x00, 0x00, 0x1b, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x00, 0x00, 0x00, 0x92, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0x92, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x72, 0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c, 0x2d, 0x63, 0x62, 0x63, 0x40, 0x6c, 0x79, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x75, 0x2e, 0x73, 0x65, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x62, 0x6c, 0x6f, 0x77, 0x66, 0x69, 0x73, 0x68, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x31, 0x32, 0x38, 0x2c, 0x61, 0x72, 0x63, 0x66, 0x6f, 0x75, 0x72, 0x2c, 0x63, 0x61, 0x73, 0x74, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x62, 0x63, 0x2c, 0x33, 0x64, 0x65, 0x73, 0x2d, 0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0x71, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x71, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x6d, 0x64, 0x35, 0x2d, 0x39, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x72, 0x69, 0x70, 0x65, 0x6d, 0x64, 0x31, 0x36, 0x30, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]
        var ke_c = allocator.buffer(capacity: _ke_c.count)
        ke_c.writeBytes(_ke_c)
        let kex_c = try KeyExchangeInitialization(parsing: &ke_c)!
        ke_c.moveReaderIndex(to: 0)
        
        let _ke_s: [UInt8] = [0x14, 0xe4, 0x26, 0x0f, 0x74, 0xcf, 0xc2, 0x05, 0x9a, 0x83, 0x5d, 0x37, 0xce, 0x9e, 0xdf, 0x90, 0x23, 0x00, 0x00, 0x01, 0x02, 0x63, 0x75, 0x72, 0x76, 0x65, 0x32, 0x35, 0x35, 0x31, 0x39, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x63, 0x75, 0x72, 0x76, 0x65, 0x32, 0x35, 0x35, 0x31, 0x39, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x40, 0x6c, 0x69, 0x62, 0x73, 0x73, 0x68, 0x2e, 0x6f, 0x72, 0x67, 0x2c, 0x65, 0x63, 0x64, 0x68, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2c, 0x65, 0x63, 0x64, 0x68, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x33, 0x38, 0x34, 0x2c, 0x65, 0x63, 0x64, 0x68, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x35, 0x32, 0x31, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x36, 0x2d, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x38, 0x2d, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x41, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61, 0x2c, 0x72, 0x73, 0x61, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x72, 0x73, 0x61, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x6e, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2c, 0x73, 0x73, 0x68, 0x2d, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x6c, 0x63, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x2d, 0x70, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30, 0x35, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x6c, 0x63, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x2d, 0x70, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30, 0x35, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x63, 0x74, 0x72, 0x2c, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36, 0x2d, 0x67, 0x63, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0xd5, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0xd5, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x2d, 0x65, 0x74, 0x6d, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x36, 0x34, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x75, 0x6d, 0x61, 0x63, 0x2d, 0x31, 0x32, 0x38, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x32, 0x35, 0x36, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x32, 0x2d, 0x35, 0x31, 0x32, 0x2c, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x15, 0x6e, 0x6f, 0x6e, 0x65, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x15, 0x6e, 0x6f, 0x6e, 0x65, 0x2c, 0x7a, 0x6c, 0x69, 0x62, 0x40, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]
        var ke_s = allocator.buffer(capacity: _ke_s.count)
        ke_s.writeBytes(_ke_s)
        let kex_s = try KeyExchangeInitialization(parsing: &ke_s)!
        ke_s.moveReaderIndex(to: 0)
        
        let client = DHClientParameters(
            keyExchangeConfig: kex_c,
            appName: "libssh2_1.9.0_DEV",
            keys: SSHKeyGenerator.premade(dhContext)
        )
        XCTAssertEqual(client.kexInitPayload.getBytes(at: 0, length: client.kexInitPayload.readableBytes), _ke_c)
        
        let server = DHServerParameters(
            publicKey: CCryptoBoringSSL_BN_bin2bn(f, f.count, nil),
            rsa: (
                CCryptoBoringSSL_BN_bin2bn(rsaE, rsaE.count, nil),
                CCryptoBoringSSL_BN_bin2bn(rsaN, rsaN.count, nil)
            ),
            hostKey: hostKey,
            signature: s,
            identificationString: "SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3",
            kexInit: ke_s
        )
        
        let params = try DHClientServerParameters(
            client: client,
            server: server,
            config: try .init(
                client: kex_c,
                server: kex_s
            )
        )
        
        XCTAssertEqual([UInt8](bignum: params.secret).count, k.count)
        XCTAssertEqual([UInt8](bignum: params.secret), k)
        XCTAssertEqual(params.exchangeHash, h)
    }
    
    func testConnect() throws {
        
        let session = try SSHSession.connect(
            host: ""
        ).wait()

        try session.authenticate(
            username: "",
            byPassword: ""
        ).wait()
        
        let channel = try session.forward(remoteHost: "localhost", remotePort: 27017, connectedIpAddress: "127.0.0.1", connectedPort: 27017).wait()
        
        let ctx = MongoClientContext(logger: .init(label: "bla"))
        try MongoConnection.addHandlers(to: channel, context: ctx).wait()
        let mongo = MongoConnection(channel: channel, context: ctx)
        try print(mongo.listDatabases().wait())
    }

    static var allTests = [
        ("testWriteMPInt", testWriteMPInt),
    ]
}
